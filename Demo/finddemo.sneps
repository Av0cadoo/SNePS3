(clearkb t)


;;; Define Types
(defineType Agent (Thing) "Individuals that have agency")
(defineType Action (Thing) "Actions that Agents can perform.")

;;; Define Slots
(defineSlot agent :type Agent)
(defineSlot object :type Thing
	    :docstring "Non-agentive objects of actions.")
(defineSlot property :type Thing)
(defineSlot life :type Thing)
(defineSlot whole :type Thing)
(defineSlot part :type Thing)
(defineSlot group :type Thing)

 
;;; Caseframes

(defineCaseframe 'Proposition '(actions agent object)
  :docstring "[agent] [actions] [object]"
  :fsymbols '(Owns Buys))

;;; Assert some propositions to find

(assert '(Isa Fido Dog))
(assert '(Isa Rover Dog))
(assert '(Isa Fluffy Cat))
(assert '(Isa Cat Cat))


;;; Test if a base proposition can be found.

(sneps::find '(Isa Rover Dog))

;;; Demonstrate proper use of variables
(sneps::find '(Isa x Dog))
(sneps::find '(Isa x Dog) '(x))

;;; Find all terms, mostly ungrounded expression
(sneps::find '(Isa x y) '(x y))

;;; Demonstrate variable binding property that a variable can only
;;; bind one term
(sneps::find '(Isa x x) '(x))

;;; Assert a meta-proposition
(assert '(Isa (Isa Clark Man) Proposition))

;;; Demonstarte a find on that proposition
(sneps::find '(Isa (Isa Clark x) y) '(x y))

;;; Assert a more complex proposition
(assert '(Isa (Isa (Isa Clark Man) Proposition) Proposition))

;;; Demonstrate properties of meta-propositions with variables
(sneps::find '(Isa (Isa x y) z) '(x y z))
(sneps::find '(Isa (Isa x y) y) '(x y))


;;; Demonstrate that mtching works with unquoted caseframes
(assert '(Buys Mike Dog))
(assert '(Buys Mike Cat))
(sneps::find '(Buys Mike x) '(x))


;;; Assert some propositions with sets
(assert '(Isa (setof Fido Rover Lassie Rags) Dog))
(assert '(Isa (setof Fluffy Scratch) (setof Cat Mammal)))
(assert '(Isa (setof Frog Amphibian) Amphibian))  

;;; Check ground propositions
(sneps::find '(Isa (setof Lassie Rags Fido Rover) Dog))

;;; Check that whole sets can be bound
(sneps::find '(Isa x  Dog) '(x))

;;; Check various combinations of single variables in sets
(sneps::find '(Isa (setof Lassie Rover Fido x) Dog) '(x))
(sneps::find '(Isa (setof Rags  x  Rover Lassie) Dog) '(x))
(sneps::find '(Isa (setof  x  Rover Lassie) Dog) '(x))
(sneps::find '(Isa (setof  x  Fluffy) (setof Mammal Cat)) '(x))

;;; Check various combinations of multiple variables in sets
(sneps::find '(Isa (setof y Rover Fido x) Dog) '(x y))
(sneps::find '(Isa (setof Rags  x  z Lassie) y) '(x y z))
(sneps::find '(Isa (setof  x  Rover Lassie) y) '(x y))
(sneps::find '(Isa (setof  x  Fluffy) (setof Mammal y)) '(x y))

;;; Check variable binding in and out of sets
(sneps::find '(Isa (setof Frog x) x) '(x))
(sneps::find '(Isa (setof y x) z) '(x y z))
(sneps::find '(Isa (setof y x) x) '(x y))

;;; Assert some sets with propositions
(assert '(Isa 
	  (setof (Isa Fido Dog) (Isa Fluffy Cat) 
	   (Isa Frog Amphibian))
	  Proposition))

;;; Can we find ground proposition sets?
(sneps::find '(Isa (setof (Isa Fluffy Cat) (Isa Frog Amphibian)
              (Isa Fido Dog)) Proposition))

;;; Check binding and matching of  propositions in sets
(sneps::find '(Isa (setof x (Isa Fluffy Cat) y) Proposition) '(x y))

;;; Variables in propositions in sets? Oh My!
(sneps::find '(Isa (setof x (Isa y Cat) z) Proposition) '(x y z))

;;; Even more variables!
(sneps::find '(Isa (setof x (Isa y w) z) Proposition) '(x y z w))

;;; More still!
(sneps::find '(Isa (setof x (Isa y w) (Isa u v)) Proposition) '(x y u v w))

;;; This is just craziness!
(sneps::find '(Isa (setof (Isa u v)  (Isa w x) (Isa y z)) t) '(t u v w
							       x y z ))
